/*
 * SProfTI API
 *
 * Seletor de Profissinais de TI API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: rubensagnelo@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using SProfTIAPI.Attributes;

using Microsoft.AspNetCore.Authorization;
using SProfTIAPI.Models;


using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Text;
using System.Security.Claims;
using SProfTIAPI.Helpers;
using SProfTIAPI.Entities;

namespace SProfTIAPI.Controllers
{ 


    [ApiController]
    public class autenticacao : ControllerBase
    { 

        private readonly AppSettings _appSettings;


       
        [HttpPost]
        [Route("/rubensagnelo/sprotiapi/1.0.0/login")]
        public virtual IActionResult login([FromBody]Usuario loginDetalhes)
        { 
               bool resultado = ValidarUsuario(loginDetalhes);
            if (resultado)
            {
                User User = new User { Id = 1, FirstName = "Test", LastName = "User", Username = "test", Password = "test" };
                var tokenString =  generateJwtToken(User); // GerarTokenJWT();
                return Ok(new { token = tokenString });
            }
            else
            {
                return Unauthorized();
            }
        }



        private IConfiguration _config;
        public autenticacao(IConfiguration Configuration)
        {
            _config = Configuration;
        }

/*
        private string GerarTokenJWT()
        {
            var issuer = _config["Jwt:Issuer"];
            var audience = _config["Jwt:Audience"];
            var expiry = DateTime.Now.AddMinutes(120);
            var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_config["Jwt:Key"]));
            var credentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);
            var token = new JwtSecurityToken(issuer: issuer,audience: audience, expires: DateTime.Now.AddMinutes(120),signingCredentials: credentials);
            var tokenHandler = new JwtSecurityTokenHandler();
            var stringToken = tokenHandler.WriteToken(token);
            return stringToken;
        }
*/

/*
        public UserService(IOptions<AppSettings> appSettings)
        {
            _appSettings = appSettings.Value;
        }
*/

        private string generateJwtToken(User user)
        {
            // generate token that is valid for 7 days
            var tokenHandler = new JwtSecurityTokenHandler();
            var key = Encoding.ASCII.GetBytes(_appSettings.Secret);
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new[] { new Claim("id", user.Id.ToString()) }),
                Expires = DateTime.UtcNow.AddDays(7),
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature),
            };
            var token = tokenHandler.CreateToken(tokenDescriptor);
            return tokenHandler.WriteToken(token);
        }


        private bool ValidarUsuario(Usuario loginDetalhes)
        {
            if (loginDetalhes.NomeUsuario == "Macoratti" && loginDetalhes.Senha == "Numsey$19")
            {
                return true;
            }
            else
            {
                return true;
            }
        }        

    }

    
    public class Usuario
    {
        public string NomeUsuario { get; set; }
        public string Senha { get; set; }
    }
}
