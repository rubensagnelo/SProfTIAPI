/*
 * SProfTI API
 *
 * Seletor de Profissinais de TI API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: rubensagnelo@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using SProfTIAPI.Attributes;

using Microsoft.AspNetCore.Authorization;
using SProfTIAPI.Models;


using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Text;

namespace SProfTIAPI.Controllers
{ 


    [ApiController]
    public class autenticacao : ControllerBase
    { 
       
        [HttpPost]
        [Route("/rubensagnelo/sprotiapi/1.0.0/autenticacao")]
        public virtual IActionResult login([FromBody]Usuario loginDetalhes)
        { 
               bool resultado = ValidarUsuario(loginDetalhes);
            if (resultado)
            {
                var tokenString = GerarTokenJWT();
                return Ok(new { token = tokenString });
            }
            else
            {
                return Unauthorized();
            }
        }



        private IConfiguration _config;
        public autenticacao(IConfiguration Configuration)
        {
            _config = Configuration;
        }

        private string GerarTokenJWT()
                {
                    var issuer = _config["Jwt:Issuer"];
                    var audience = _config["Jwt:Audience"];
                    var expiry = DateTime.Now.AddMinutes(120);
                    var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_config["Jwt:Key"]));
                    var credentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);
                    var token = new JwtSecurityToken(issuer: issuer,audience: audience, expires: DateTime.Now.AddMinutes(120),signingCredentials: credentials);
                    var tokenHandler = new JwtSecurityTokenHandler();
                    var stringToken = tokenHandler.WriteToken(token);
                    return stringToken;
                }

        private bool ValidarUsuario(Usuario loginDetalhes)
        {
            if (loginDetalhes.NomeUsuario == "Macoratti" && loginDetalhes.Senha == "Numsey$19")
            {
                return true;
            }
            else
            {
                return false;
            }
        }        

    }

    
    public class Usuario
    {
        public string NomeUsuario { get; set; }
        public string Senha { get; set; }
    }
}
