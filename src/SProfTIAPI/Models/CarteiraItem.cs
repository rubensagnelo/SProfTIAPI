/*
 * SProfTI API
 *
 * Seletor de Profissinais de TI API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: rubensagnelo@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace SProfTIAPI.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CarteiraItem : IEquatable<CarteiraItem>
    { 
        /// <summary>
        /// Gets or Sets Idcarteira
        /// </summary>
        [Required]
        [DataMember(Name="idcarteira")]
        public int? Idcarteira { get; set; }

        /// <summary>
        /// Gets or Sets Titulo
        /// </summary>
        [Required]
        [DataMember(Name="titulo")]
        public string Titulo { get; set; }

        /// <summary>
        /// Gets or Sets Descrcricao
        /// </summary>
        [DataMember(Name="descrcricao")]
        public string Descrcricao { get; set; }

        /// <summary>
        /// Gets or Sets Dataatualizaco
        /// </summary>
        [DataMember(Name="dataatualizaco")]
        public DateTime? Dataatualizaco { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CarteiraItem {\n");
            sb.Append("  Idcarteira: ").Append(Idcarteira).Append("\n");
            sb.Append("  Titulo: ").Append(Titulo).Append("\n");
            sb.Append("  Descrcricao: ").Append(Descrcricao).Append("\n");
            sb.Append("  Dataatualizaco: ").Append(Dataatualizaco).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CarteiraItem)obj);
        }

        /// <summary>
        /// Returns true if CarteiraItem instances are equal
        /// </summary>
        /// <param name="other">Instance of CarteiraItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CarteiraItem other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Idcarteira == other.Idcarteira ||
                    Idcarteira != null &&
                    Idcarteira.Equals(other.Idcarteira)
                ) && 
                (
                    Titulo == other.Titulo ||
                    Titulo != null &&
                    Titulo.Equals(other.Titulo)
                ) && 
                (
                    Descrcricao == other.Descrcricao ||
                    Descrcricao != null &&
                    Descrcricao.Equals(other.Descrcricao)
                ) && 
                (
                    Dataatualizaco == other.Dataatualizaco ||
                    Dataatualizaco != null &&
                    Dataatualizaco.Equals(other.Dataatualizaco)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Idcarteira != null)
                    hashCode = hashCode * 59 + Idcarteira.GetHashCode();
                    if (Titulo != null)
                    hashCode = hashCode * 59 + Titulo.GetHashCode();
                    if (Descrcricao != null)
                    hashCode = hashCode * 59 + Descrcricao.GetHashCode();
                    if (Dataatualizaco != null)
                    hashCode = hashCode * 59 + Dataatualizaco.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CarteiraItem left, CarteiraItem right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CarteiraItem left, CarteiraItem right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
